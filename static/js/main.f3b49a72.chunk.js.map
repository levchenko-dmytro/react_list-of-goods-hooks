{"version":3,"sources":["App.tsx","index.tsx"],"names":["goods","map","el","i","name","id","length","SORT_FIELD_NAME","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","reversed","setReversed","visibleGoods","items","preparedGoods","sort","item1","item2","localeCompare","reverse","getPreparedGoods","className","type","cn","onClick","good","ReactDOM","render","document","getElementById"],"mappings":"yPA4BMA,EAvByB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAaoCC,KAAI,SAACC,EAAIC,GAAL,MAAY,CACpDC,KAAMF,EACNG,GAAIF,EACJG,OAAQJ,EAAGI,WAGPC,EAAkB,OAClBC,EAAoB,SA2BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAA4B,MAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EA7BR,SACEC,EADF,EAGEH,GACC,IAFCF,EAEF,EAFEA,UAGIM,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAMR,GAAWU,cAAcD,EAAMT,IAE9C,KAAKH,EACH,OAAOW,EAAMR,GAAaS,EAAMT,GAElC,QACE,OAAO,MAKRE,EAAWI,EAAcK,UAAYL,EAOvBM,CAAiBvB,EAAO,CAAEW,aAAaE,GAO5D,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBACZ,CAAE,WAAYf,IAAcJ,IAC9BoB,QAAS,kBAAMf,EAAaL,IAJ9B,iCASA,wBACEkB,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,WAAYf,IAAcH,IAC9BmB,QAAS,kBAAMf,EAAaJ,IAJ9B,4BASA,wBACEiB,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,YAAab,IACjBc,QAAS,kBAAMb,GAAaD,IAJ9B,sBASEA,GAAYF,IACZ,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAvCI,WACZf,EAAa,MACbE,GAAY,IAkCN,sBAUJ,6BACGC,EAAad,KAAI,SAAA2B,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,EAAKxB,MADgBwB,EAAKvB,aCjHvCwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f3b49a72.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface Good {\n  name: string;\n  id: number;\n  length: number;\n}\n\ninterface SortParams {\n  sortField: keyof Good | null;\n}\n\nconst goods: Good[] = goodsFromServer.map((el, i) => ({\n  name: el,\n  id: i,\n  length: el.length,\n}));\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(\n  items: Good[],\n  { sortField }: SortParams,\n  reversed: boolean,\n) {\n  const preparedGoods = [...items];\n\n  if (sortField) {\n    preparedGoods.sort((item1, item2) => {\n      switch (sortField) {\n        case SORT_FIELD_NAME:\n          return item1[sortField].localeCompare(item2[sortField]);\n\n        case SORT_FIELD_LENGTH:\n          return item1[sortField] - item2[sortField];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return reversed ? preparedGoods.reverse() : preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState<keyof Good | null>(null);\n  const [reversed, setReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goods, { sortField }, reversed);\n\n  const reset = () => {\n    setSortField(null);\n    setReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortField !== SORT_FIELD_NAME })}\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortField !== SORT_FIELD_LENGTH })}\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !reversed })}\n          onClick={() => setReversed(!reversed)}\n        >\n          Reverse\n        </button>\n\n        {(reversed || sortField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good.id}>\n            {good.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}